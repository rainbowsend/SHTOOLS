#pragma once
namespace shtools {
extern "C"
{
  void cPlmBar(double* p,
               const int* p_d0,
               const int* lmax,
               const double* z,
               const int* csphase,
               const int* cnorm,
               int* exitstatus);
  void cPlmBar_d1(double* p,
                  const int* p_d0,
                  double* dp1,
                  const int* dp1_d0,
                  const int* lmax,
                  const double* z,
                  const int* csphase,
                  const int* cnorm,
                  int* exitstatus);
  void cPlBar(double* p,
              const int* p_d0,
              const int* lmax,
              const double* z,
              int* exitstatus);
  void cPlBar_d1(double* p,
                 const int* p_d0,
                 double* dp1,
                 const int* dp1_d0,
                 const int* lmax,
                 const double* z,
                 int* exitstatus);
  void cPlmON(double* p,
              const int* p_d0,
              const int* lmax,
              const double* z,
              const int* csphase,
              const int* cnorm,
              int* exitstatus);
  void cPlmON_d1(double* p,
                 const int* p_d0,
                 double* dp1,
                 const int* dp1_d0,
                 const int* lmax,
                 const double* z,
                 const int* csphase,
                 const int* cnorm,
                 int* exitstatus);
  void cPlON(double* p,
             const int* p_d0,
             const int* lmax,
             const double* z,
             int* exitstatus);
  void cPlON_d1(double* p,
                const int* p_d0,
                double* dp1,
                const int* dp1_d0,
                const int* lmax,
                const double* z,
                int* exitstatus);
  void cPlmSchmidt(double* p,
                   const int* p_d0,
                   const int* lmax,
                   const double* z,
                   const int* csphase,
                   const int* cnorm,
                   int* exitstatus);
  void cPlmSchmidt_d1(double* p,
                      const int* p_d0,
                      double* dp1,
                      const int* dp1_d0,
                      const int* lmax,
                      const double* z,
                      const int* csphase,
                      const int* cnorm,
                      int* exitstatus);
  void cPlSchmidt(double* p,
                  const int* p_d0,
                  const int* lmax,
                  const double* z,
                  int* exitstatus);
  void cPlSchmidt_d1(double* p,
                     const int* p_d0,
                     double* dp1,
                     const int* dp1_d0,
                     const int* lmax,
                     const double* z,
                     int* exitstatus);
  void cPLegendreA(double* p,
                   const int* p_d0,
                   const int* lmax,
                   const double* z,
                   const int* csphase,
                   int* exitstatus);
  void cPLegendreA_d1(double* p,
                      const int* p_d0,
                      double* dp1,
                      const int* dp1_d0,
                      const int* lmax,
                      const double* z,
                      const int* csphase,
                      int* exitstatus);
  void cPLegendre(double* p,
                  const int* p_d0,
                  const int* lmax,
                  const double* z,
                  int* exitstatus);
  void cPLegendre_d1(double* p,
                     const int* p_d0,
                     double* dp1,
                     const int* dp1_d0,
                     const int* lmax,
                     const double* z,
                     int* exitstatus);
  int cPlmIndex(const int* l, const int* m);
  void cSHExpandDH(const double* grid,
                   const int* grid_d0,
                   const int* grid_d1,
                   const int* n,
                   double* cilm,
                   const int* cilm_d,
                   int* lmax,
                   const int* norm,
                   const int* sampling,
                   const int* csphase,
                   const int* lmax_calc,
                   int* exitstatus);
  void cMakeGridDH(double* griddh,
                   const int* griddh_d0,
                   const int* griddh_d1,
                   int* n,
                   const double* cilm,
                   const int* cilm_d,
                   const int* lmax,
                   const int* norm,
                   const int* sampling,
                   const int* csphase,
                   const int* lmax_calc,
                   const int* extend,
                   int* exitstatus);
  void cSHExpandDHC(const double _Complex* grid,
                    const int* grid_d0,
                    const int* grid_d1,
                    const int* n,
                    double _Complex* cilm,
                    const int* cilm_d,
                    int* lmax,
                    const int* norm,
                    const int* sampling,
                    const int* csphase,
                    const int* lmax_calc,
                    int* exitstatus);
  void cMakeGridDHC(double _Complex* griddh,
                    const int* griddh_d0,
                    const int* griddh_d1,
                    int* n,
                    const double _Complex* cilm,
                    const int* cilm_d,
                    const int* lmax,
                    const int* norm,
                    const int* sampling,
                    const int* csphase,
                    const int* lmax_calc,
                    const int* extend,
                    int* exitstatus);
  void cSHGLQ(const int* lmax,
              double* zero,
              const int* zero_d0,
              double* w,
              const int* w_d0,
              double* plx,
              const int* plx_d0,
              const int* plx_d1,
              const int* norm,
              const int* csphase,
              const int* cnorm,
              int* exitstatus);
  void cSHExpandGLQ(double* cilm,
                    const int* cilm_d,
                    const int* lmax,
                    const double* gridglq,
                    const int* gridglq_d0,
                    const int* gridglq_d1,
                    const double* w,
                    const int* w_d0,
                    const double* plx,
                    const int* plx_d0,
                    const int* plx_d1,
                    const double* zero,
                    const int* zero_d0,
                    const int* norm,
                    const int* csphase,
                    const int* lmax_calc,
                    int* exitstatus);
  void cMakeGridGLQ(double* gridglq,
                    const int* gridglq_d0,
                    const int* gridglq_d1,
                    const double* cilm,
                    const int* cilm_d,
                    const int* lmax,
                    const double* plx,
                    const int* plx_d0,
                    const int* plx_d1,
                    const double* zero,
                    const int* zero_d0,
                    const int* norm,
                    const int* csphase,
                    const int* lmax_calc,
                    const int* extend,
                    int* exitstatus);
  void cSHExpandGLQC(double _Complex* cilm,
                     const int* cilm_d,
                     const int* lmax,
                     const double _Complex* gridglq,
                     const int* gridglq_d0,
                     const int* gridglq_d1,
                     const double* w,
                     const int* w_d0,
                     const double* plx,
                     const int* plx_d0,
                     const int* plx_d1,
                     const double* zero,
                     const int* zero_d0,
                     const int* norm,
                     const int* csphase,
                     const int* lmax_calc,
                     int* exitstatus);
  void cMakeGridGLQC(double _Complex* gridglq,
                     const int* gridglq_d0,
                     const int* gridglq_d1,
                     const double _Complex* cilm,
                     const int* cilm_d,
                     const int* lmax,
                     const double* plx,
                     const int* plx_d0,
                     const int* plx_d1,
                     const double* zero,
                     const int* zero_d0,
                     const int* norm,
                     const int* csphase,
                     const int* lmax_calc,
                     const int* extend,
                     int* exitstatus);
  void cGLQGridCoord(double* latglq,
                     const int* latglq_d0,
                     double* longlq,
                     const int* longlq_d0,
                     const int* lmax,
                     int* nlat,
                     int* nlong,
                     const int* extend,
                     int* exitstatus);
  void cSHExpandLSQ(double* cilm,
                    const int* cilm_d,
                    const double* d,
                    const int* d_d0,
                    const double* lat,
                    const int* lat_d0,
                    const double* lon,
                    const int* lon_d0,
                    const int* nmax,
                    const int* lmax,
                    const int* norm,
                    double* chi2,
                    const int* csphase,
                    const double* weights,
                    const int* weights_d0,
                    int* exitstatus);
  void cMakeGrid2d(double* grid,
                   const int* grid_d0,
                   const int* grid_d1,
                   const double* cilm,
                   const int* cilm_d,
                   const int* lmax,
                   const double* interval,
                   int* nlat,
                   int* nlong,
                   const int* norm,
                   const int* csphase,
                   const double* f,
                   const double* a,
                   const double* north,
                   const double* south,
                   const double* east,
                   const double* west,
                   const int* dealloc,
                   int* exitstatus);
  double cMakeGridPoint(const double* cilm,
                        const int* cilm_d,
                        const int* lmax,
                        const double* lat,
                        const double* lon,
                        const int* norm,
                        const int* csphase,
                        const int* dealloc);
  double _Complex cMakeGridPointC(const double _Complex* cilm,
                                  const int* cilm_d,
                                  const int* lmax,
                                  const double* lat,
                                  const double* lon,
                                  const int* norm,
                                  const int* csphase,
                                  const int* dealloc);
  void cSHMultiply(double* shout,
                   const int* shout_d0,
                   const int* shout_d1,
                   const int* shout_d2,
                   const double* sh1,
                   const int* sh1_d0,
                   const int* sh1_d1,
                   const int* sh1_d2,
                   const int* lmax1,
                   const double* sh2,
                   const int* sh2_d0,
                   const int* sh2_d1,
                   const int* sh2_d2,
                   const int* lmax2,
                   const int* precomp,
                   const int* norm,
                   const int* csphase,
                   int* exitstatus);
  void cSHRead(const char* filename,
               const int* filename_d1,
               double* cilm,
               const int* cilm_d,
               int* lmax,
               const int* skip,
               double* header,
               const int* header_d0,
               double* error,
               const int* error_d0,
               const int* error_d1,
               const int* error_d2,
               int* exitstatus);
  void cSHRead2(const char* filename,
                const int* filename_d1,
                double* cilm,
                const int* cilm_d,
                int* lmax,
                double* gm,
                double* r0_pot,
                double* error,
                const int* error_d0,
                const int* error_d1,
                const int* error_d2,
                double* dot,
                const int* dot_d0,
                const int* dot_d1,
                const int* dot_d2,
                double* doystart,
                double* doyend,
                double* epoch,
                int* exitstatus);
  void cSHReadJPL(const char* filename,
                  const int* filename_d1,
                  double* cilm,
                  const int* cilm_d,
                  const int* lmax,
                  double* error,
                  const int* error_d0,
                  const int* error_d1,
                  const int* error_d2,
                  double* gm,
                  const char* formatstring,
                  int* exitstatus);
  void cSHCilmToVector(const double* cilm,
                       const int* cilm_d,
                       double* vector,
                       const int* vector_d0,
                       const int* lmax,
                       int* exitstatus);
  void cSHVectorToCilm(const double* vector,
                       const int* vector_d0,
                       double* cilm,
                       const int* cilm_d,
                       const int* lmax,
                       int* exitstatus);
  void cSHCilmToCindex(const double* cilm,
                       const int* cilm_d,
                       double* cindex,
                       const int* cindex_d0,
                       const int* cindex_d1,
                       const int* degmax,
                       int* exitstatus);
  void cSHCindexToCilm(const double* cindex,
                       const int* cindex_d0,
                       const int* cindex_d1,
                       double* cilm,
                       const int* cilm_d,
                       const int* degmax,
                       int* exitstatus);
  void cSHrtoc(const double* rcilm,
               const int* rcilm_d0,
               const int* rcilm_d1,
               const int* rcilm_d2,
               double* ccilm,
               const int* ccilm_d0,
               const int* ccilm_d1,
               const int* ccilm_d2,
               const int* degmax,
               const int* convention,
               const int* switchcs,
               int* exitstatus);
  void cSHctor(const double* ccilm,
               const int* ccilm_d0,
               const int* ccilm_d1,
               const int* ccilm_d2,
               double* rcilm,
               const int* rcilm_d0,
               const int* rcilm_d1,
               const int* rcilm_d2,
               const int* degmax,
               const int* convention,
               const int* switchcs,
               int* exitstatus);
  void cdjpi2(double* dj,
              const int* dj_d0,
              const int* dj_d1,
              const int* dj_d2,
              const int* lmax,
              int* exitstatus);
  void cSHRotateCoef(const double* x,
                     const double* cof,
                     const int* cof_d0,
                     const int* cof_d1,
                     double* rcof,
                     const int* rcof_d0,
                     const int* rcof_d1,
                     const double* dj,
                     const int* dj_d0,
                     const int* dj_d1,
                     const int* dj_d2,
                     const int* lmax,
                     int* exitstatus);
  void cSHRotateRealCoef(double* cilmrot,
                         const int* cilmrot_d0,
                         const int* cilmrot_d1,
                         const int* cilmrot_d2,
                         const double* cilm,
                         const int* cilm_d,
                         const int* lmax,
                         const double* x,
                         const int* x_d0,
                         const double* dj,
                         const int* dj_d0,
                         const int* dj_d1,
                         const int* dj_d2,
                         int* exitstatus);
  double cSHPowerL(const double* c,
                   const int* c_d0,
                   const int* c_d1,
                   const int* c_d2,
                   const int* l);
  double cSHPowerDensityL(const double* c,
                          const int* c_d0,
                          const int* c_d1,
                          const int* c_d2,
                          const int* l);
  double cSHCrossPowerL(const double* c1,
                        const int* c1_d0,
                        const int* c1_d1,
                        const int* c1_d2,
                        const double* c2,
                        const int* c2_d0,
                        const int* c2_d1,
                        const int* c2_d2,
                        const int* l);
  double cSHCrossPowerDensityL(const double* c1,
                               const int* c1_d0,
                               const int* c1_d1,
                               const int* c1_d2,
                               const double* c2,
                               const int* c2_d0,
                               const int* c2_d1,
                               const int* c2_d2,
                               const int* l);
  void cSHPowerSpectrum(const double* c,
                        const int* c_d0,
                        const int* c_d1,
                        const int* c_d2,
                        const int* lmax,
                        double* spectra,
                        const int* spectra_d0,
                        int* exitstatus);
  void cSHPowerSpectrumDensity(const double* c,
                               const int* c_d0,
                               const int* c_d1,
                               const int* c_d2,
                               const int* lmax,
                               double* spectra,
                               const int* spectra_d0,
                               int* exitstatus);
  void cSHCrossPowerSpectrum(const double* c1,
                             const int* c1_d0,
                             const int* c1_d1,
                             const int* c1_d2,
                             const double* c2,
                             const int* c2_d0,
                             const int* c2_d1,
                             const int* c2_d2,
                             const int* lmax,
                             double* cspectra,
                             const int* cspectra_d0,
                             int* exitstatus);
  void cSHCrossPowerSpectrumDensity(const double* c1,
                                    const int* c1_d0,
                                    const int* c1_d1,
                                    const int* c1_d2,
                                    const double* c2,
                                    const int* c2_d0,
                                    const int* c2_d1,
                                    const int* c2_d2,
                                    const int* lmax,
                                    double* cspectra,
                                    const int* cspectra_d0,
                                    int* exitstatus);
  void cSHAdmitCorr(const double* G,
                    const int* G_d0,
                    const int* G_d1,
                    const int* G_d2,
                    const double* T,
                    const int* T_d0,
                    const int* T_d1,
                    const int* T_d2,
                    const int* lmax,
                    double* admit,
                    const int* admit_d0,
                    double* corr,
                    const int* corr_d0,
                    double* admit_error,
                    const int* admit_error_d0,
                    int* exitstatus);
  double cSHConfidence(const int* l_conf, const double* r);
  double cSHPowerLC(const double _Complex* c,
                    const int* c_d0,
                    const int* c_d1,
                    const int* c_d2,
                    const int* l);
  double cSHPowerDensityLC(const double _Complex* c,
                           const int* c_d0,
                           const int* c_d1,
                           const int* c_d2,
                           const int* l);
  double _Complex cSHCrossPowerLC(const double _Complex* c1,
                                  const int* c1_d0,
                                  const int* c1_d1,
                                  const int* c1_d2,
                                  const double _Complex* c2,
                                  const int* c2_d0,
                                  const int* c2_d1,
                                  const int* c2_d2,
                                  const int* l);
  double _Complex cSHCrossPowerDensityLC(const double _Complex* c1,
                                         const int* c1_d0,
                                         const int* c1_d1,
                                         const int* c1_d2,
                                         const double _Complex* c2,
                                         const int* c2_d0,
                                         const int* c2_d1,
                                         const int* c2_d2,
                                         const int* l);
  void cSHPowerSpectrumC(const double _Complex* c,
                         const int* c_d0,
                         const int* c_d1,
                         const int* c_d2,
                         const int* lmax,
                         double* spectra,
                         const int* spectra_d0,
                         int* exitstatus);
  void cSHPowerSpectrumDensityC(const double _Complex* c,
                                const int* c_d0,
                                const int* c_d1,
                                const int* c_d2,
                                const int* lmax,
                                double* spectra,
                                const int* spectra_d0,
                                int* exitstatus);
  void cSHCrossPowerSpectrumC(const double _Complex* c1,
                              const int* c1_d0,
                              const int* c1_d1,
                              const int* c1_d2,
                              const double _Complex* c2,
                              const int* c2_d0,
                              const int* c2_d1,
                              const int* c2_d2,
                              const int* lmax,
                              double _Complex* cspectra,
                              const int* cspectra_d0,
                              int* exitstatus);
  void cSHCrossPowerSpectrumDensityC(const double _Complex* c1,
                                     const int* c1_d0,
                                     const int* c1_d1,
                                     const int* c1_d2,
                                     const double _Complex* c2,
                                     const int* c2_d0,
                                     const int* c2_d1,
                                     const int* c2_d2,
                                     const int* lmax,
                                     double _Complex* cspectra,
                                     const int* cspectra_d0,
                                     int* exitstatus);
  void cSHMultiTaperSE(double* mtse,
                       const int* mtse_d0,
                       double* sd,
                       const int* sd_d0,
                       const double* sh,
                       const int* sh_d0,
                       const int* sh_d1,
                       const int* sh_d2,
                       const int* lmax,
                       const double* tapers,
                       const int* tapers_d0,
                       const int* tapers_d1,
                       const int* taper_order,
                       const int* taper_order_d0,
                       const int* lmaxt,
                       const int* k,
                       const double* alpha,
                       const int* alpha_d0,
                       const double* lat,
                       const double* lon,
                       const double* taper_wt,
                       const int* taper_wt_d0,
                       const int* norm,
                       const int* csphase,
                       int* exitstatus);
  void cSHMultiTaperCSE(double* mtse,
                        const int* mtse_d0,
                        double* sd,
                        const int* sd_d0,
                        const double* sh1,
                        const int* sh1_d0,
                        const int* sh1_d1,
                        const int* sh1_d2,
                        const int* lmax1,
                        const double* sh2,
                        const int* sh2_d0,
                        const int* sh2_d1,
                        const int* sh2_d2,
                        const int* lmax2,
                        const double* tapers,
                        const int* tapers_d0,
                        const int* tapers_d1,
                        const int* taper_order,
                        const int* taper_order_d0,
                        const int* lmaxt,
                        const int* k,
                        const double* alpha,
                        const int* alpha_d0,
                        const double* lat,
                        const double* lon,
                        const double* taper_wt,
                        const int* taper_wt_d0,
                        const int* norm,
                        const int* csphase,
                        int* exitstatus);
  void cSHLocalizedAdmitCorr(const double* tapers,
                             const int* tapers_d0,
                             const int* tapers_d1,
                             const int* taper_order,
                             const int* taper_order_d0,
                             const int* lwin,
                             const double* lat,
                             const double* lon,
                             const double* g,
                             const int* g_d0,
                             const int* g_d1,
                             const int* g_d2,
                             const double* t,
                             const int* t_d0,
                             const int* t_d1,
                             const int* t_d2,
                             const int* lmax,
                             double* admit,
                             const int* admit_d0,
                             double* corr,
                             const int* corr_d0,
                             const int* k,
                             double* admit_error,
                             const int* admit_error_d0,
                             double* corr_error,
                             const int* corr_error_d0,
                             const double* taper_wt,
                             const int* taper_wt_d0,
                             const int* mtdef,
                             const int* k1linsig,
                             int* exitstatus);
  void cSHReturnTapers(const double* theta0,
                       const int* lmax,
                       double* tapers,
                       const int* tapers_d0,
                       const int* tapers_d1,
                       double* eigenvalues,
                       const int* eigenvalues_d0,
                       int* taper_order,
                       const int* taper_order_d0,
                       const int* degrees,
                       const int* degrees_d0,
                       int* exitstatus);
  void cSHReturnTapersM(const double* theta0,
                        const int* lmax,
                        const int* m,
                        double* tapers,
                        const int* tapers_d0,
                        const int* tapers_d1,
                        double* eigenvalues,
                        const int* eigenvalues_d0,
                        double* shannon,
                        const int* degrees,
                        const int* degrees_d0,
                        int* ntapers,
                        int* exitstatus);
  void cComputeDm(double* dllm,
                  const int* dllm_d0,
                  const int* dllm_d1,
                  const int* lmax,
                  const int* m,
                  const double* theta0,
                  const int* degrees,
                  const int* degrees_d0,
                  int* exitstatus);
  void cComputeDG82(double* dG82,
                    const int* dG82_d0,
                    const int* dG82_d1,
                    const int* lmax,
                    const int* m,
                    const double* theta0,
                    int* exitstatus);
  int cSHFindLWin(const double* theta0,
                  const int* m,
                  const double* alpha,
                  const int* taper_number);
  void cSHBiasK(const double* tapers,
                const int* tapers_d0,
                const int* tapers_d1,
                const int* lwin,
                const int* k,
                const double* incspectra,
                const int* incspectra_d0,
                const int* ldata,
                double* outcspectra,
                const int* outcspectra_d0,
                const double* taper_wt,
                const int* taper_wt_d0,
                const int* save_cg,
                int* exitstatus);
  void cSHMTCouplingMatrix(double* Mmt,
                           const int* Mmt_d0,
                           const int* Mmt_d1,
                           const int* lmax,
                           const double* tapers_power,
                           const int* tapers_power_d0,
                           const int* tapers_power_d1,
                           const int* lwin,
                           const int* k,
                           const double* taper_wt,
                           const int* taper_wt_d0,
                           int* exitstatus);
  void cSHBiasAdmitCorr(const double* sgt,
                        const int* sgt_d0,
                        const double* sgg,
                        const int* sgg_d0,
                        const double* stt,
                        const int* stt_d0,
                        const int* lmax,
                        const double* tapers,
                        const int* tapers_d0,
                        const int* tapers_d1,
                        const int* lwin,
                        const int* k,
                        double* admit,
                        const int* admit_d0,
                        double* corr,
                        const int* corr_d0,
                        const int* mtdef,
                        const double* taper_wt,
                        const int* taper_wt_d0,
                        int* exitstatus);
  void cSHMTDebias(double* mtdebias,
                   const int* mtdebias_d0,
                   const int* mtdebias_d1,
                   const double* mtspectra,
                   const int* mtspectra_d0,
                   const int* mtspectra_d1,
                   const int* lmax,
                   const double* tapers,
                   const int* tapers_d0,
                   const int* tapers_d1,
                   const int* lwin,
                   const int* k,
                   const int* nl,
                   double* lmid,
                   const int* lmid_d0,
                   int* n,
                   const double* taper_wt,
                   const int* taper_wt_d0,
                   int* exitstatus);
  void cSHMTVarOpt(const int* l,
                   const double* tapers,
                   const int* tapers_d0,
                   const int* tapers_d1,
                   const int* taper_order,
                   const int* taper_order_d0,
                   const int* lwin,
                   const int* kmax,
                   const double* Sff,
                   const int* Sff_d0,
                   double* var_opt,
                   const int* var_opt_d0,
                   double* var_unit,
                   const int* var_unit_d0,
                   double* weight_opt,
                   const int* weight_opt_d0,
                   const int* weight_opt_d1,
                   double* unweighted_covar,
                   const int* unweighted_covar_d0,
                   const int* unweighted_covar_d1,
                   const int* nocross,
                   int* exitstatus);
  void cSHMTVar(const int* l,
                const double* tapers,
                const int* tapers_d0,
                const int* tapers_d1,
                const int* taper_order,
                const int* taper_order_d0,
                const int* lwin,
                const int* kmax,
                const double* Sff,
                const int* Sff_d0,
                double* variance,
                const double* taper_wt,
                const int* taper_wt_d0,
                double* unweighted_covar,
                const int* unweighted_covar_d0,
                const int* unweighted_covar_d1,
                const int* nocross,
                int* exitstatus);
  double _Complex cSHSjkPG(const double* incspectra,
                           const int* incspectra_d0,
                           const int* l,
                           const int* m,
                           const int* mprime,
                           const double* hj_real,
                           const int* hj_real_d0,
                           const double* hk_real,
                           const int* hk_real_d0,
                           const int* mj,
                           const int* mk,
                           const int* lwin,
                           const int* hkcc);
  void cSHReturnTapersMap(double* tapers,
                          const int* tapers_d0,
                          const int* tapers_d1,
                          double* eigenvalues,
                          const int* eigenvalues_d0,
                          const int* dh_mask,
                          const int* dh_mask_d0,
                          const int* dh_mask_d1,
                          const int* n_dh,
                          const int* lmax,
                          const int* sampling,
                          const int* ntapers,
                          const int* degrees,
                          const int* degrees_d0,
                          int* exitstatus);
  void cSHBiasKMask(const double* tapers,
                    const int* tapers_d0,
                    const int* tapers_d1,
                    const int* lwin,
                    const int* k,
                    const double* incspectra,
                    const int* incspectra_d0,
                    const int* ldata,
                    double* outcspectra,
                    const int* outcspectra_d0,
                    const double* taper_wt,
                    const int* taper_wt_d0,
                    const int* save_cg,
                    int* exitstatus);
  void cSHMultiTaperMaskSE(double* mtse,
                           const int* mtse_d0,
                           double* sd,
                           const int* sd_d0,
                           const double* sh,
                           const int* sh_d0,
                           const int* sh_d1,
                           const int* sh_d2,
                           const int* lmax,
                           const double* tapers,
                           const int* tapers_d0,
                           const int* tapers_d1,
                           const int* lmaxt,
                           const int* k,
                           const double* taper_wt,
                           const int* taper_wt_d0,
                           const int* norm,
                           const int* csphase,
                           int* exitstatus);
  void cSHMultiTaperMaskCSE(double* mtse,
                            const int* mtse_d0,
                            double* sd,
                            const int* sd_d0,
                            const double* sh1,
                            const int* sh1_d0,
                            const int* sh1_d1,
                            const int* sh1_d2,
                            const int* lmax1,
                            const double* sh2,
                            const int* sh2_d0,
                            const int* sh2_d1,
                            const int* sh2_d2,
                            const int* lmax2,
                            const double* tapers,
                            const int* tapers_d0,
                            const int* tapers_d1,
                            const int* lmaxt,
                            const int* k,
                            const double* taper_wt,
                            const int* taper_wt_d0,
                            const int* norm,
                            const int* csphase,
                            int* exitstatus);
  void cComputeDMap(double* Dij,
                    const int* Dij_d0,
                    const int* Dij_d1,
                    const int* dh_mask,
                    const int* dh_mask_d0,
                    const int* dh_mask_d1,
                    const int* n_dh,
                    const int* lmax,
                    const int* sampling,
                    const int* degrees,
                    const int* degrees_d0,
                    int* exitstatus);
  void cCurve2Mask(int* dhgrid,
                   const int* dhgrid_d0,
                   const int* dhgrid_d1,
                   const int* n,
                   const int* sampling,
                   const double* profile,
                   const int* profile_d0,
                   const int* profile_d1,
                   const int* nprofile,
                   int* NP,
                   const int* extend,
                   int* exitstatus);
  void cSHBias(const double* Shh,
               const int* Shh_d0,
               const int* lwin,
               const double* incspectra,
               const int* incspectra_d0,
               const int* ldata,
               double* outcspectra,
               const int* outcspectra_d0,
               const int* save_cg,
               int* exitstatus);
  void cSphericalCapCoef(double* coef,
                         const int* coef_d0,
                         const double* theta,
                         const int* lmax,
                         int* exitstatus);
  void cMakeGravGridDH(const double* cilm,
                       const int* cilm_d,
                       const int* lmax,
                       const double* gm,
                       const double* r0,
                       const double* a,
                       const double* f,
                       double* rad,
                       const int* rad_d0,
                       const int* rad_d1,
                       double* theta,
                       const int* theta_d0,
                       const int* theta_d1,
                       double* phi,
                       const int* phi_d0,
                       const int* phi_d1,
                       double* total,
                       const int* total_d0,
                       const int* total_d1,
                       int* n,
                       const int* sampling,
                       const int* lmax_calc,
                       const double* omega,
                       const int* normal_gravity,
                       double* pot,
                       const int* pot_d0,
                       const int* pot_d1,
                       const int* extend,
                       int* exitstatus);
  void cMakeGravGradGridDH(const double* cilm,
                           const int* cilm_d,
                           const int* lmax,
                           const double* gm,
                           const double* r0,
                           const double* a,
                           const double* f,
                           double* vxx,
                           const int* vxx_d0,
                           const int* vxx_d1,
                           double* vyy,
                           const int* vyy_d0,
                           const int* vyy_d1,
                           double* vzz,
                           const int* vzz_d0,
                           const int* vzz_d1,
                           double* vxy,
                           const int* vxy_d0,
                           const int* vxy_d1,
                           double* vxz,
                           const int* vxz_d0,
                           const int* vxz_d1,
                           double* vyz,
                           const int* vyz_d0,
                           const int* vyz_d1,
                           int* n,
                           const int* sampling,
                           const int* lmax_calc,
                           const int* extend,
                           int* exitstatus);
  void cMakeMagGradGridDH(const double* cilm,
                          const int* cilm_d,
                          const int* lmax,
                          const double* r0,
                          const double* a,
                          const double* f,
                          double* vxx,
                          const int* vxx_d0,
                          const int* vxx_d1,
                          double* vyy,
                          const int* vyy_d0,
                          const int* vyy_d1,
                          double* vzz,
                          const int* vzz_d0,
                          const int* vzz_d1,
                          double* vxy,
                          const int* vxy_d0,
                          const int* vxy_d1,
                          double* vxz,
                          const int* vxz_d0,
                          const int* vxz_d1,
                          double* vyz,
                          const int* vyz_d0,
                          const int* vyz_d1,
                          int* n,
                          const int* sampling,
                          const int* lmax_calc,
                          const int* extend,
                          int* exitstatus);
  void cMakeGeoidGrid(double* geoid,
                      const int* geoid_d0,
                      const int* geoid_d1,
                      const double* cilm,
                      const int* cilm_d,
                      const int* lmax,
                      const double* r0pot,
                      const double* GM,
                      const double* PotRef,
                      const double* omega,
                      const double* r,
                      const int* gridtype,
                      const int* order,
                      int* nlat,
                      int* nlong,
                      const double* interval,
                      const int* lmax_calc,
                      const double* a,
                      const double* f,
                      const int* extend,
                      int* exitstatus);
  void cCilmPlus(double* cilm,
                 const int* cilm_d,
                 const double* gridin,
                 const int* gridin_d0,
                 const int* gridin_d1,
                 const int* lmax,
                 const int* nmax,
                 const double* mass,
                 double* d,
                 const double* rho,
                 const int* gridtype,
                 const double* w,
                 const int* w_d0,
                 const double* zero,
                 const int* zero_d0,
                 const double* plx,
                 const int* plx_d0,
                 const int* plx_d1,
                 const int* n,
                 const double* dref,
                 int* exitstatus);
  void cCilmMinus(double* cilm,
                  const int* cilm_d,
                  const double* gridin,
                  const int* gridin_d0,
                  const int* gridin_d1,
                  const int* lmax,
                  const int* nmax,
                  const double* mass,
                  double* d,
                  const double* rho,
                  const int* gridtype,
                  const double* w,
                  const int* w_d0,
                  const double* zero,
                  const int* zero_d0,
                  const double* plx,
                  const int* plx_d0,
                  const int* plx_d1,
                  const int* n,
                  const double* dref,
                  int* exitstatus);
  void cCilmPlusRhoH(double* cilm,
                     const int* cilm_d,
                     const double* gridin,
                     const int* gridin_d0,
                     const int* gridin_d1,
                     const int* lmax,
                     const int* nmax,
                     const double* mass,
                     double* d,
                     const double* rho,
                     const int* rho_d0,
                     const int* rho_d1,
                     const int* gridtype,
                     const double* w,
                     const int* w_d0,
                     const double* zero,
                     const int* zero_d0,
                     const double* plx,
                     const int* plx_d0,
                     const int* plx_d1,
                     const int* n,
                     const double* dref,
                     int* exitstatus);
  void cCilmMinusRhoH(double* cilm,
                      const int* cilm_d,
                      const double* gridin,
                      const int* gridin_d0,
                      const int* gridin_d1,
                      const int* lmax,
                      const int* nmax,
                      const double* mass,
                      double* d,
                      const double* rho,
                      const int* rho_d0,
                      const int* rho_d1,
                      const int* gridtype,
                      const double* w,
                      const int* w_d0,
                      const double* zero,
                      const int* zero_d0,
                      const double* plx,
                      const int* plx_d0,
                      const int* plx_d1,
                      const int* n,
                      const double* dref,
                      int* exitstatus);
  void cBAtoHilm(double* cilm,
                 const int* cilm_d,
                 const double* ba,
                 const int* ba_d0,
                 const int* ba_d1,
                 const int* ba_d2,
                 const double* gridglq,
                 const int* gridglq_d0,
                 const int* gridglq_d1,
                 const int* lmax,
                 const int* nmax,
                 const double* mass,
                 const double* r0,
                 const double* rho,
                 const int* gridtype,
                 const double* w,
                 const int* w_d0,
                 const double* plx,
                 const int* plx_d0,
                 const int* plx_d1,
                 const double* zero,
                 const int* zero_d0,
                 const int* filter_type,
                 const int* filter_deg,
                 const int* lmax_calc,
                 int* exitstatus);
  void cBAtoHilmRhoH(double* cilm,
                     const int* cilm_d,
                     const double* ba,
                     const int* ba_d0,
                     const int* ba_d1,
                     const int* ba_d2,
                     const double* gridglq,
                     const int* gridglq_d0,
                     const int* gridglq_d1,
                     const int* lmax,
                     const int* nmax,
                     const double* mass,
                     const double* r0,
                     const double* rho,
                     const int* rho_d0,
                     const int* rho_d1,
                     const int* gridtype,
                     const double* w,
                     const int* w_d0,
                     const double* plx,
                     const int* plx_d0,
                     const int* plx_d1,
                     const double* zero,
                     const int* zero_d0,
                     const int* filter_type,
                     const int* filter_deg,
                     const int* lmax_calc,
                     int* exitstatus);
  double cDownContFilterMA(const int* l,
                           const int* half,
                           const double* r,
                           const double* d);
  double cDownContFilterMC(const int* l,
                           const int* half,
                           const double* r,
                           const double* d);
  double cNormalGravity(const double* geocentric_lat,
                        const double* gm,
                        const double* omega,
                        const double* a,
                        const double* b);
  void cMakeMagGridDH(const double* cilm,
                      const int* cilm_d,
                      const int* lmax,
                      const double* r0,
                      const double* a,
                      const double* f,
                      double* rad_grid,
                      const int* rad_grid_d0,
                      const int* rad_grid_d1,
                      double* theta_grid,
                      const int* theta_grid_d0,
                      const int* theta_grid_d1,
                      double* phi_grid,
                      const int* phi_grid_d0,
                      const int* phi_grid_d1,
                      double* total_grid,
                      const int* total_grid_d0,
                      const int* total_grid_d1,
                      int* n,
                      const int* sampling,
                      const int* lmax_calc,
                      double* pot_grid,
                      const int* pot_grid_d0,
                      const int* pot_grid_d1,
                      const int* extend,
                      int* exitstatus);
  void cSHMagPowerSpectrum(const double* c,
                           const int* c_d0,
                           const int* c_d1,
                           const int* c_d2,
                           const double* a,
                           const double* r,
                           const int* lmax,
                           double* spectra,
                           const int* spectra_d0,
                           int* exitstatus);
  double cSHMagPowerL(const double* c,
                      const int* c_d0,
                      const int* c_d1,
                      const int* c_d2,
                      const double* a,
                      const double* r,
                      const int* l);
  void cMakeCircleCoord(double* coord,
                        const int* coord_d0,
                        const int* coord_d1,
                        const double* lat,
                        const double* lon,
                        const double* theta0,
                        const double* cinterval,
                        int* cnum,
                        int* exitstatus);
  void cMakeEllipseCoord(double* coord,
                         const int* coord_d0,
                         const int* coord_d1,
                         const double* lat,
                         const double* lon,
                         const double* dec,
                         const double* A_theta,
                         const double* B_theta,
                         const double* cinterval,
                         int* cnum,
                         int* exitstatus);
  void cWigner3j(double* w3j,
                 const int* w3j_d0,
                 int* jmin,
                 int* jmax,
                 const int* j2,
                 const int* j3,
                 const int* m1,
                 const int* m2,
                 const int* m3,
                 int* exitstatus);
  double cRandomN(int* idum);
  double cRandomGaussian(int* idum);
  void cPreGLQ(const double* x1,
               const double* x2,
               const int* n,
               double* zero,
               const int* zero_d0,
               double* w,
               const int* w_d0,
               int* exitstatus);
  int cNGLQ(const int* degree);
  int cNGLQSH(const int* degree);
  int cNGLQSHN(const int* degree, const int* n);
  void cDHaj(const int* n,
             double* aj,
             const int* aj_d0,
             const int* extend,
             int* exitstatus);
  int cYilmIndexVector(const int* i, const int* l, const int* m);
  void cEigValVecSym(const double* ain,
                     const int* ain_d0,
                     const int* ain_d1,
                     const int* n,
                     double* eig,
                     const int* eig_d0,
                     double* evec,
                     const int* evec_d0,
                     const int* evec_d1,
                     const char* ul,
                     const int* K,
                     int* exitstatus);
  void cEigValVecSymTri(const double* ain,
                        const int* ain_d0,
                        const int* ain_d1,
                        const int* n,
                        double* eig,
                        const int* eig_d0,
                        double* evec,
                        const int* evec_d0,
                        const int* evec_d1,
                        const char* ul,
                        int* exitstatus);
  void cEigValSym(const double* ain,
                  const int* ain_d0,
                  const int* ain_d1,
                  const int* n,
                  double* eval,
                  const int* eval_d0,
                  const char* ul);
  void cSHRotateTapers(double* tapersrot,
                       const int* tapersrot_d0,
                       const int* tapersrot_d1,
                       const double* tapers,
                       const int* tapers_d0,
                       const int* tapers_d1,
                       const int* taper_order,
                       const int* taper_order_d0,
                       const int* lmax,
                       const int* nrot,
                       const double* x,
                       const int* x_d0,
                       const double* dj,
                       const int* dj_d0,
                       const int* dj_d1,
                       const int* dj_d2,
                       int* exitstatus);
  void cSlepianCoeffs(double* falpha,
                      const int* falpha_d0,
                      const double* galpha,
                      const int* galpha_d0,
                      const int* galpha_d1,
                      const double* flm,
                      const int* flm_d0,
                      const int* flm_d1,
                      const int* flm_d2,
                      const int* lmax,
                      const int* nmax,
                      int* exitstatus);
  void cSlepianCoeffsToSH(double* flm,
                          const int* flm_d0,
                          const int* flm_d1,
                          const int* flm_d2,
                          const double* falpha,
                          const int* falpha_d0,
                          const double* galpha,
                          const int* galpha_d0,
                          const int* galpha_d1,
                          const int* lmax,
                          const int* nmax,
                          int* exitstatus);
  void cSHSCouplingMatrix(double* kij,
                          const int* kij_d0,
                          const int* kij_d1,
                          const double* galpha,
                          const int* galpha_d0,
                          const int* galpha_d1,
                          const int* lmax,
                          const int* nmax,
                          int* exitstatus);
  void cSHSlepianVar(const int* l,
                     const double* galpha,
                     const int* galpha_d0,
                     const int* galpha_d1,
                     const int* galpha_order,
                     const int* galpha_order_d0,
                     const int* lmax,
                     const int* kmax,
                     const double* Sff,
                     const int* Sff_d0,
                     double* variance,
                     int* exitstatus);
  void cSHSCouplingMatrixCap(double* kij,
                             const int* kij_d0,
                             const int* kij_d1,
                             const double* galpha,
                             const int* galpha_d0,
                             const int* galpha_d1,
                             const int* galpha_order,
                             const int* galpha_order_d0,
                             const int* lmax,
                             const int* nmax,
                             int* exitstatus);
}
}
